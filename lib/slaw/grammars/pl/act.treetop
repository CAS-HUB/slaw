# encoding: UTF-8

require 'slaw/parse/grammar_helpers'
require 'slaw/grammars/pl/act_nodes'

require 'slaw/grammars/terminals'
require 'slaw/grammars/tables'
require 'slaw/grammars/schedules'
require 'slaw/grammars/inlines'

module Slaw
  module Grammars
    module PL
      grammar Act
        include Slaw::Parse::GrammarHelpers

        ########
        # major containers

        rule act
          empty_line*
          preface:preface?
          preamble:preamble?
          body
          schedules:schedules_container? <Act>
        end

        rule preface
          !'PREAMBLE'
          ('PREFACE'i space? eol)?
          statements:(!'PREAMBLE' pre_body_statement)* <Preface>
        end

        rule preamble
          'PREAMBLE'i space? eol
          statements:pre_body_statement* <Preamble>
        end

        rule body
          children:(division / subdivision / chapter / article / section / paragraph / point / litera / indents / block_paragraphs)+ <Body>
        end

        rule division
          heading:division_heading
          children:(subdivision / chapter / article / section / paragraph / point / litera / indents / block_paragraphs)*
          <Division>
        end

        rule subdivision
          heading:subdivision_heading
          children:(chapter / article / section / paragraph / point / litera / indents / block_paragraphs)*
          <Subdivision>
        end

        rule chapter
          heading:chapter_heading
          children:(article / section / paragraph / point / litera / indents / block_paragraphs)*
          <Chapter>
        end

        rule article
          # Art. 55. some optional text
          # 1. first paragraph etc.
          article_prefix intro
          children:(section / paragraph / point / litera / indents / block_paragraphs)* <Article>
        end

        rule section
          # § 55. foo
          section_prefix intro
          children:(paragraph / point / litera / indents / block_paragraphs)* <Section>
        end

        rule paragraph
          # ustęp:
          #  34. ...
          paragraph_prefix intro
          children:(point / litera / indents / block_paragraphs)* <Paragraph>
        end

        rule point
          # 12) aoeuaoeu
          # 12a) aoeuaoeu
          point_prefix intro
          children:(litera / indents / block_paragraphs)* <Point>
        end

        rule litera
          # a) aoeuaoeu
          litera_prefix intro
          children:(indents / block_paragraphs)* <Litera>
        end

        rule indents
          # - foo
          # - bar
          children:indent_item+ <Indents>
        end

        rule indent_item
          indent_prefix item_content:inline_block_element? eol? <IndentItem>
        end

        rule intro
          (intro_inline:inline_block_element / (eol intro_block:block_element))? eol?
        end

        ##########
        # group elements
        # 
        # these are used externally and provide support when parsing just
        # a particular portion of a document

        rule divisions
          children:division+ <GroupNode>
        end

        rule subdivisions
          children:subdivision+ <GroupNode>
        end

        rule chapters
          children:chapter+ <GroupNode>
        end

        rule articles
          children:article+ <GroupNode>
        end

        rule sections
          children:section+ <GroupNode>
        end

        rule paragraphs
          children:paragraph+ <GroupNode>
        end

        rule points
          children:point+ <GroupNode>
        end

        ##########
        # headings

        rule division_heading
          space? prefix:division_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule subdivision_heading
          space? prefix:subdivision_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule chapter_heading
          space? prefix:chapter_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        ##########
        # blocks of content inside containers

        rule block_paragraphs
          block_element+ <BlockParagraph>
        end

        rule block_element
          table / naked_statement
        end

        # Block elements that don't have to appear at the start of a line.
        # ie. we don't need to guard against the start of a chapter, section, etc.
        rule inline_block_element
          table / inline_statement
        end

        ##########
        # statements - single lines of content
        #
        # If a statement starts with a backslash, it's considered to have escaped the subsequent word,
        # and is ignored. This allows escaping of section headings, etc.

        rule naked_statement
          space? !(division_heading / subdivision_heading / chapter_heading / article_prefix / section_prefix / schedule_title / paragraph_prefix / point_prefix / litera_prefix / indent_prefix) '\\'? clauses eol
          <NakedStatement>
        end

        rule pre_body_statement
          space? !(division_heading / subdivision_heading / chapter_heading / article_prefix / section_prefix / schedule_title) '\\'? clauses eol
          <NakedStatement>
        end

        ##########
        # prefixes

        rule division_heading_prefix
          'dzia'i ('ł'/'Ł') space alphanums [ :-]*
        end

        rule subdivision_heading_prefix
          'oddzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule chapter_heading_prefix
          'rozdzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule article_prefix
          ('Art.'i / ('Artyku'i 'ł'/'Ł')) space number_letter '.'?
        end

        rule section_prefix
          '§' space alphanums '.'?
        end

        rule paragraph_prefix
          number_letter '.'
        end

        rule point_prefix
          # 1) foo
          # 2A) foo
          number_letter ')'
        end

        rule litera_prefix
          # a) foo
          # bb) foo
          letters:letter+ ')'
        end

        rule indent_prefix
          '-' space
        end

        include Slaw::Grammars::Inlines
        include Slaw::Grammars::Tables
        include Slaw::Grammars::Schedules
        include Slaw::Grammars::Terminals
      end
    end
  end
end
