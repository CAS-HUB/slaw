# encoding: UTF-8

require 'slaw/parse/grammar_helpers'
require 'slaw/grammars/pl/act_nodes'

module Slaw
  module Grammars
    module PL
      grammar Act
        include Slaw::Parse::GrammarHelpers

        ########
        # major containers

        rule act
          empty_line*
          preface:preface?
          preamble:preamble?
          body
          schedules:schedules_container? <Act>
        end

        rule preface
          !'PREAMBLE'
          ('PREFACE'i space? eol)?
          statements:(!'PREAMBLE' pre_body_statement)* <Preface>
        end

        rule preamble
          'PREAMBLE'i space? eol
          statements:pre_body_statement* <Preamble>
        end

        rule body
          children:(division / subdivision / chapter / section / paragraph / point / block_paragraphs)+ <Body>
        end

        rule division
          heading:division_heading
          children:(subdivision / chapter / section / paragraph / point / block_paragraphs)*
          <Division>
        end

        rule subdivision
          heading:subdivision_heading
          children:(chapter / section / paragraph / point / block_paragraphs)*
          <Subdivision>
        end

        rule chapter
          heading:chapter_heading
          children:(section / paragraph / point / block_paragraphs)*
          <Chapter>
        end

        rule section
          # § 55. foo
          section_title
          children:(paragraph / point / block_paragraphs)* <Section>
        end

        rule paragraph
          # ustęp:
          #  34. ...
          space? paragraph_prefix space?
          # eg. 34. foo bar baz
          first_child:inline_block_element?
          eol?
          children:(point / block_paragraphs)* <Paragraph>
        end

        rule point
          # 12a) aoeuaoeu
          space? point_prefix space?
          # eg: (2) (a) foo
          first_child:inline_block_element?
          # eg: (2)
          eol?
          children:block_element* <Point>
        end

        rule schedules_container
          schedules:schedules <ScheduleContainer>
        end

        rule schedules
          children:schedule+ <GroupNode>
        end

        rule schedule
          schedule_title
          body:body?
          <Schedule>
        end

        ##########
        # group elements
        # 
        # these are used externally and provide support when parsing just
        # a particular portion of a document

        rule chapters
          children:chapter+ <GroupNode>
        end

        rule sections
          children:section+ <GroupNode>
        end

        rule points
          children:point+ <GroupNode>
        end

        ##########
        # headings

        rule division_heading
          space? prefix:division_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule subdivision_heading
          space? prefix:subdivision_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule chapter_heading
          space? prefix:chapter_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule section_title
          space? section_title_prefix section_title:section_title_content? eol?
          <SectionTitle>
        end

        rule section_title_content
          # don't match points, eg.
          #
          # 10. 1) point content...
          space !point_prefix content eol
        end

        rule schedule_title
          space? schedule_title_prefix space? "\""? num:alphanums? "\""? [ \t:.-]* title:(content)?
          heading:(newline space? content)?
          eol
        end

        ##########
        # blocks of content inside containers

        rule block_paragraphs
          block_element+ <BlockParagraph>
        end

        rule block_element
          # XXX: blocklist
          (table / naked_statement)
        end

        # Block elements that don't have to appear at the start of a line.
        # ie. we don't need to guard against the start of a chapter, section, etc.
        rule inline_block_element
          # XXX: blocklist
          (table / inline_statement)
        end

        rule blocklist
          blocklist_item+ <Blocklist>
        end

        rule blocklist_item
          # TODO: this whitespace should probably be space, to allow empty blocklist items followed by plain text
          space? blocklist_item_prefix whitespace item_content:(!blocklist_item_prefix clauses:clauses? eol)? eol?
          <BlocklistItem>
        end

        rule blocklist_item_prefix
          ('(' letter_ordinal ')') / dotted_number_3
        end

        ##########
        # wikimedia-style tables
        #
        # this grammar doesn't support inline table cells (eg: | col1 || col2 || col3)
        # instead, the builder preprocesses tables to break inline cells onto their own
        # lines, which we do support.

        rule table
          space? '{|' eol
          table_body
          '|}' eol
          <Table>
        end

        rule table_body
          (table_row / table_cell)*
        end

        rule table_row
          '|-' space? eol
        end

        rule table_cell
          # don't match end-of-table
          !'|}'
          [!|] attribs:table_attribs? space?
          # first content line, then multiple lines
          content:(line:table_line (![!|] space? line:table_line)*)
          <TableCell>
        end

        rule table_line
          clauses:clauses? eol
          <TableLine>
        end

        rule table_attribs
          space? attribs:(table_attrib+) '|'
        end

        rule table_attrib
          name:([a-z_-]+) '=' value:(
                                     ('"' (!'"' .)* '"') /
                                     ("'" (!"'" .)* "'"))
          space?
        end

        ##########
        # statements - single lines of content
        #
        # If a statement starts with a backslash, it's considered to have escaped the subsequent word,
        # and is ignored. This allows escaping of section headings, etc.

        rule naked_statement
          space? !(chapter_heading / section_title / schedule_title / paragraph_prefix / point_prefix) '\\'? clauses eol
          <NakedStatement>
        end

        rule pre_body_statement
          space? !(chapter_heading / section_title / schedule_title) '\\'? clauses eol
          <NakedStatement>
        end

        rule inline_statement
          space? '\\'? clauses eol
          <NakedStatement>
        end

        ##########
        # inline content

        # one or more words, allowing inline elements
        rule clauses
          (remark / image / ref / [^\n])+
          <Clauses>
        end

        rule remark
          '[[' content:(ref / (!']]' .))+ ']]'
          <Remark>
        end

        rule image
          # images like markdown
          # eg. ![title text](image url)
          #
          # the title text is optional, but the enclosing square brackets aren't
          '![' content:(!'](' [^\n])* '](' href:([^)\n]+) ')'
          <Image>
        end

        rule ref
          # links like markdown
          # eg. [link text](link url)
          '[' content:(!'](' [^\n])+ '](' href:([^)\n]+) ')'
          <Ref>
        end

        ##########
        # prefixes

        rule division_heading_prefix
          'dzia'i ('ł'/'Ł') space alphanums [ :-]*
        end

        rule subdivision_heading_prefix
          'oddzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule chapter_heading_prefix
          'rozdzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule schedule_title_prefix
          'schedule'i 's'i?
        end

        rule section_title_prefix
          '§' space alphanums '.'?
        end

        rule paragraph_prefix
          alphanums '.'
        end

        rule point_prefix
          # 1) foo
          # 2A) foo
          number_letter ')'
        end

        #########
        ## one line of basic content

        rule content
          # anything but a newline, followed by a
          # newline or end of file (without consuming the newline)
          [^\n]+ &eol
        end

        ##########
        # terminals

        # eg. 2, 2A, 2b
        rule number_letter
          number letter*
        end

        rule letter_ordinal
          letter (letter / digit)*
        end

        rule dotted_number_3
          number '.' number ('.' number)+
        end

        rule dotted_number_2
          number '.' number
        end

        rule number
          digit+
        end

        rule digit
          [0-9]
        end

        rule letter
          [a-zA-Z]
        end

        rule alphanums
          [a-zA-Z0-9]+
        end

        rule quotes
          ["“”]
        end
        
        rule non_quotes
          [^"“”]
        end

        ##########
        # whitespace

        rule space
          [ \t]+
        end

        rule whitespace
          [ \t\n]*
        end

        rule empty_line
          space? newline
        end

        rule eol
          newline
          empty_line*
        end

        rule newline
          "\n"
        end
      end
    end
  end
end

