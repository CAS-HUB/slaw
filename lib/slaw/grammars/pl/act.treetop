# encoding: UTF-8

require 'slaw/parse/grammar_helpers'
require 'slaw/grammars/pl/act_nodes'

require 'slaw/grammars/terminals'
require 'slaw/grammars/tables'
require 'slaw/grammars/schedules'
require 'slaw/grammars/inlines'

module Slaw
  module Grammars
    module PL
      grammar Act
        ########
        # major containers

        rule act
          empty_line*
          preface:preface?
          preamble:preamble?
          body
          schedules:schedules_container? <Act>
        end

        rule preface
          !'PREAMBLE'
          ('PREFACE'i space? eol)?
          statements:(!'PREAMBLE' pre_body_statement)* <Preface>
        end

        rule preamble
          'PREAMBLE'i space? eol
          statements:pre_body_statement* <Preamble>
        end

        rule body
          children:(division / subdivision / chapter / section / paragraph / point / block_paragraphs)+ <Body>
        end

        rule division
          heading:division_heading
          children:(subdivision / chapter / section / paragraph / point / block_paragraphs)*
          <Division>
        end

        rule subdivision
          heading:subdivision_heading
          children:(chapter / section / paragraph / point / block_paragraphs)*
          <Subdivision>
        end

        rule chapter
          heading:chapter_heading
          children:(section / paragraph / point / block_paragraphs)*
          <Chapter>
        end

        rule section
          # § 55. foo
          section_prefix whitespace
          intro:block_element?
          eol?
          children:(paragraph / point / block_paragraphs)* <Section>
        end

        rule paragraph
          # ustęp:
          #  34. ...
          paragraph_prefix space?
          intro:block_element?
          eol?
          children:(point / block_paragraphs)* <Paragraph>
        end

        rule point
          # 12a) aoeuaoeu
          point_prefix whitespace
          intro:block_element?
          eol?
          children:block_paragraphs* <Point>
        end

        ##########
        # group elements
        # 
        # these are used externally and provide support when parsing just
        # a particular portion of a document

        rule divisions
          children:division+ <GroupNode>
        end

        rule subdivisions
          children:subdivision+ <GroupNode>
        end

        rule chapters
          children:chapter+ <GroupNode>
        end

        rule sections
          children:section+ <GroupNode>
        end

        rule points
          children:point+ <GroupNode>
        end

        ##########
        # headings

        rule division_heading
          space? prefix:division_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule subdivision_heading
          space? prefix:subdivision_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        rule chapter_heading
          space? prefix:chapter_heading_prefix heading:(newline? content)? eol
          <GenericHeading>
        end

        ##########
        # blocks of content inside containers

        rule block_paragraphs
          block_element+ <BlockParagraph>
        end

        rule block_element
          # XXX: blocklist
          (table / naked_statement)
        end

        # Block elements that don't have to appear at the start of a line.
        # ie. we don't need to guard against the start of a chapter, section, etc.
        rule inline_block_element
          # XXX: blocklist
          (table / inline_statement)
        end

        rule blocklist
          blocklist_item+ <Blocklist>
        end

        rule blocklist_item
          # TODO: this whitespace should probably be space, to allow empty blocklist items followed by plain text
          space? blocklist_item_prefix whitespace item_content:(!blocklist_item_prefix clauses:clauses? eol)? eol?
          <BlocklistItem>
        end

        rule blocklist_item_prefix
          ('(' letter_ordinal ')') / dotted_number_3
        end

        ##########
        # statements - single lines of content
        #
        # If a statement starts with a backslash, it's considered to have escaped the subsequent word,
        # and is ignored. This allows escaping of section headings, etc.

        rule naked_statement
          space? !(division_heading / subdivision_heading / chapter_heading / section_prefix / schedule_title / paragraph_prefix / point_prefix) '\\'? clauses eol
          <NakedStatement>
        end

        rule pre_body_statement
          space? !(division_heading / subdivision_heading / chapter_heading / section_prefix / schedule_title) '\\'? clauses eol
          <NakedStatement>
        end

        ##########
        # prefixes

        rule division_heading_prefix
          'dzia'i ('ł'/'Ł') space alphanums [ :-]*
        end

        rule subdivision_heading_prefix
          'oddzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule chapter_heading_prefix
          'rozdzia'i ('ł'/'Ł') space alphanums [ :.-]*
        end

        rule section_prefix
          '§' space alphanums '.'?
        end

        rule paragraph_prefix
          alphanums '.'
        end

        rule point_prefix
          # 1) foo
          # 2A) foo
          number_letter ')'
        end

        include Slaw::Grammars::Inlines
        include Slaw::Grammars::Tables
        include Slaw::Grammars::Schedules
        include Slaw::Grammars::Terminals
      end
    end
  end
end

