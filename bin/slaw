#!/usr/bin/env ruby

require 'thor'
require 'slaw'

class SlawCLI < Thor
  # TODO: support different grammars and locales

  class_option :verbose, type: :boolean, desc: "Display log output on stderr"

  desc "parse FILE", "Parse FILE into Akoma Ntoso XML"
  option :input, enum: ['text', 'pdf'], desc: "Type of input if it can't be determined automatically"
  option :pdftotext, desc: "Location of the pdftotext binary if not in PATH"
  option :definitions, type: :boolean, desc: "Find and link definitions (this can be slow). Default: false"
  option :fragment, type: :string, desc: "Akoma Ntoso element name that the imported text represents. Support depends on the grammar."
  option :id_prefix, type: :string, desc: "Prefix to be used when generating ID elements when parsing a fragment."
  def parse(name)
    logging

    if options[:fragment] and options[:definitions]
      raise Thor::Error.new("--definitions can't be used together with --fragment")
    end

    Slaw::Extract::Extractor.pdftotext_path = options[:pdftotext] if options[:pdftotext]
    extractor = Slaw::Extract::Extractor.new

    case options[:input]
    when 'pdf'
      text = extractor.extract_from_pdf(name)
    when 'text'
      text = extractor.extract_from_text(name)
    else
      text = extractor.extract_from_file(name)
    end

    generator = Slaw::ActGenerator.new

    if options[:fragment]
      generator.document_class = Slaw::Fragment

      fragment = options[:fragment]
      fragment = case fragment.downcase
                 when 'akomantoso'
                   'act'
                 when 'doc'
                   'schedule'
                 else
                   fragment
                  end
      generator.builder.parse_options[:root] = fragment

      if options[:id_prefix]
        prefix = options[:id_prefix]
        prefix += "." unless prefix.end_with?('.')
        generator.builder.fragment_id_prefix = prefix
      end
    end

    begin
      act = generator.generate_from_text(text)
    rescue Slaw::Parse::ParseError => e
      error e.message
      exit 1
    end

    # definitions?
    generator.builder.link_definitions(act.doc) if options[:definitions]

    puts act.to_xml(indent: 2)
  end

  map %w(--version) => :__print_version
  desc "--version", "Print slaw version info"
  def __print_version
    say "slaw #{Slaw::VERSION}"
  end

  no_commands do
    def logging
      logger = Log4r::Logger.new('Slaw')
      logger.outputters = Log4r::Outputter.stderr
      logger.outputters[0].level = options[:verbose] ? Log4r::DEBUG : Log4r::ERROR
    end
  end
end

SlawCLI.start(ARGV)
