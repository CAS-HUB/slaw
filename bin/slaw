#!/usr/bin/env ruby

require 'thor'
require 'slaw'

class SlawCLI < Thor
  # TODO: support different grammars and locales

  # Exit with non-zero exit code on failure.
  # See https://github.com/erikhuda/thor/issues/244
  def self.exit_on_failure?
    true
  end

  class_option :verbose, type: :boolean, desc: "Display log output on stderr"

  desc "parse FILE", "Parse FILE into Akoma Ntoso XML"
  option :input, enum: ['text', 'pdf'], desc: "Type of input if it can't be determined automatically"
  option :pdftotext, desc: "Location of the pdftotext binary if not in PATH"
  option :fragment, type: :string, desc: "Akoma Ntoso element name that the imported text represents. Support depends on the grammar."
  option :id_prefix, type: :string, desc: "Prefix to be used when generating ID elements when parsing a fragment."
  option :section_number_position, enum: ['before-title', 'after-title', 'guess'], desc: "Where do section titles come in relation to the section number? Default: before-title"
  option :reformat, type: :boolean, desc: "Reformat common formatting issues to make grammar matching better. Default: true for PDF files, false otherwise"
  option :crop, type: :string, desc: "Crop box for PDF files, as 'left,top,width,height'."
  option :grammar, type: :string, desc: "Grammar name (usually a two-letter country code). Default is za."
  def parse(name)
    logging

    Slaw::Extract::Extractor.pdftotext_path = options[:pdftotext] if options[:pdftotext]
    extractor = Slaw::Extract::Extractor.new

    if options[:crop]
      extractor.cropbox = options[:crop].split(',').map(&:to_i)
      if extractor.cropbox.length != 4
        raise Thor::Error.new("--crop requires four comma-separated integers")
      end
    end

    case options[:input]
    when 'pdf'
      text = extractor.extract_from_pdf(name)
      options[:reformat] = true if options[:reformat].nil?
    when 'text'
      text = extractor.extract_from_text(name)
    else
      text = extractor.extract_from_file(name)
    end

    generator = Slaw::ActGenerator.new(options[:grammar] || 'za')

    text = generator.reformat(text) if options[:reformat]

    if options[:fragment]
      generator.document_class = Slaw::Fragment

      fragment = options[:fragment]
      fragment = case fragment.downcase
                 when 'akomantoso'
                   'act'
                 when 'doc'
                   'schedule'
                 else
                   fragment
                  end
      generator.builder.parse_options[:root] = fragment

      if options[:id_prefix]
        prefix = options[:id_prefix]
        prefix += "." unless prefix.end_with?('.')
        generator.builder.fragment_id_prefix = prefix
      end
    end

    case (options[:section_number_position] || "before-title")
    when "before-title"
      generator.parser.options[:section_number_after_title] = false
    when "after-title"
      generator.parser.options[:section_number_after_title] = true
    when "guess"
      after = generator.guess_section_number_after_title(text)
      error "guessed section number position is #{after ? "after-title" : "before-title"}"

      generator.parser.options[:section_number_after_title] = after
    end

    begin
      act = generator.generate_from_text(text)
    rescue Slaw::Parse::ParseError => e
      error e.message
      exit 1
    end

    puts act.to_xml(indent: 2)
  end

  desc "unparse FILE", "Unparse FILE from Akoma Ntoso XML back into text suitable for re-parsing"
  def unparse(name)
    generator = Slaw::ActGenerator.new

    doc = File.open(name, 'r') { |f| doc = generator.builder.parse_xml(f.read) }
    puts generator.text_from_act(doc)
  end

  map %w(--version) => :__print_version
  desc "--version", "Print slaw version info"
  def __print_version
    say "slaw #{Slaw::VERSION}"
  end

  no_commands do
    def logging
      logger = Log4r::Logger.new('Slaw')
      logger.outputters = Log4r::Outputter.stderr
      logger.outputters[0].level = options[:verbose] ? Log4r::DEBUG : Log4r::ERROR
    end
  end
end

SlawCLI.start(ARGV)
